/*
 * Oxford Brookes University Secure Email Proxy 
 * Copyright (C) 2002/3 Oxford Brookes University Secure Email Project
 * http://secemail.brookes.ac.uk
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 * 
 * The Secure Email Project is:
 * 
 * Marcus Povey <mpovey@brookes.ac.uk> or <icewing@dushka.co.uk>
 * Damian Branigan <dbranigan@brookes.ac.uk>
 * George Davson <gdavson@brookes.ac.uk>
 * David Duce <daduce@brookes.ac.uk>
 * Simon Hogg <simon.hogg@brookes.ac.uk>
 * Faye Mitchell <frmitchell@brookes.ac.uk>
 * 
 * For further information visit the secure email project website.
 */

package ui;
import system.*;
import java.lang.String;
import java.awt.Image;
import java.util.Properties;
import java.io.*;

/**
 * <p>This class creates the Proxy Server's main window. </p>
 */
public class MainWindow extends javax.swing.JFrame implements StatusOutputInterface {

    /** Creates new form MainWindow 
     * @param configFile Path and filename of the configuration file (passed to the configuration window)
     */
    public MainWindow(ConfigurationData configFile) {
        configurationFile = configFile;
        
        Image iconImage=java.awt.Toolkit.getDefaultToolkit().getImage(this.getClass().getResource("/res/gfx/appicon.gif")); 
        setIconImage(iconImage);
        
        try {
            buildinfo = app.AppVersionInfo.getBuildInfo();
        } catch (IOException e) {
            System.err.println(e.getMessage());
        }
        
        initComponents();   
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setTitle("Secure Email Proxy v" + buildinfo.getProperty("build.version"));
        setFont(new java.awt.Font("Dialog", 0, 10));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        jScrollPane1.setBorder(new javax.swing.border.TitledBorder("Status"));
        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setPreferredSize(new java.awt.Dimension(370, 200));
        jTextArea1.setBackground(new java.awt.Color(204, 204, 204));
        jTextArea1.setEditable(false);
        jTextArea1.setFont(new java.awt.Font("Dialog", 0, 10));
        jTextArea1.setLineWrap(true);
        jTextArea1.setWrapStyleWord(true);
        jScrollPane1.setViewportView(jTextArea1);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel1.setLayout(new java.awt.BorderLayout());

        jButton1.setMnemonic('c');
        jButton1.setText("Configure Proxy");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel1.add(jButton1, java.awt.BorderLayout.SOUTH);

        jButton2.setMnemonic('m');
        jButton2.setText("Manage Keys");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jPanel1.add(jButton2, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        pack();
        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        java.awt.Dimension dialogSize = getSize();
        setLocation((screenSize.width-dialogSize.width)/2,(screenSize.height-dialogSize.height)/2);
    }//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // Add your handling code here:
        
        // try opening config file to load the algorithm being used for key management
        if (configurationFile.getSetting("algorithm","openpgp").compareToIgnoreCase("openpgp")==0) {
            OpenPGPKeyManager keymanager = new OpenPGPKeyManager(configurationFile, new javax.swing.JFrame(), true);
            keymanager.show();
        } else {
            System.err.println("Unrecognised algorithm specified, can not find appropriate key manager class.");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    /** Configure button clicked, open configuration dialog. */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // Add your handling code here:
        ConfigurationWindow configWindow = new ConfigurationWindow(configurationFile, new javax.swing.JFrame(), true);
        configWindow.show();
    }//GEN-LAST:event_jButton1ActionPerformed

    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm

    /** Implements the StatusOutputInterface interface.
     * @see system.StatusOutputInterface
     */
    public void appendStatusText(String text) {
        jTextArea1.append(text);
        jScrollPane1.getVerticalScrollBar().setValue(jTextArea1.getHeight() - jTextArea1.getVisibleRect().height );

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
    private ConfigurationData configurationFile;
    private Properties buildinfo;
}
