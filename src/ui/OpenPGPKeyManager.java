/*
 * Oxford Brookes University Secure Email Proxy 
 * Copyright (C) 2002/3 Oxford Brookes University Secure Email Project
 * http://secemail.brookes.ac.uk
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 * 
 * The Secure Email Project is:
 * 
 * Marcus Povey <mpovey@brookes.ac.uk> or <icewing@dushka.co.uk>
 * Damian Branigan <dbranigan@brookes.ac.uk>
 * George Davson <gdavson@brookes.ac.uk>
 * David Duce <daduce@brookes.ac.uk>
 * Simon Hogg <simon.hogg@brookes.ac.uk>
 * Faye Mitchell <frmitchell@brookes.ac.uk>
 * 
 * For further information visit the secure email project website.
 */

package ui;
import system.*;
import java.awt.Component;
import java.io.IOException;
import javax.swing.JFileChooser;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.ListCellRenderer;
import java.lang.*;
import java.util.*;
import core.exceptions.*; 
import core.keyhandlers.*;
import core.keyhandlers.identifiers.*;
import core.keyhandlers.keydata.*;
import core.keyhandlers.parameters.*;
import core.algorithmhandlers.keymaterial.*;
import core.algorithmhandlers.openpgp.util.*;
import core.algorithmhandlers.openpgp.packets.*;
import java.awt.Image;
import java.security.SecureRandom;
import javax.swing.ProgressMonitor;
import javax.swing.event.*;
import javax.swing.tree.*;

/**
 * <p>A class that displays an OpenPGP key management window.</p>
 */
public class OpenPGPKeyManager extends javax.swing.JDialog {
    
    /** Creates new form OpenPGPKeyManager */
    public OpenPGPKeyManager(ConfigurationData configFile, java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        configurationData = configFile;
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jButton5 = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jPanel13 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jPanel14 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();
        jPanel17 = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jPasswordField2 = new javax.swing.JPasswordField();
        jPanel16 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jPasswordField1 = new javax.swing.JPasswordField();
        jPanel9 = new javax.swing.JPanel();
        jPanel24 = new javax.swing.JPanel();
        jButton16 = new javax.swing.JButton();
        jButton19 = new javax.swing.JButton();
        jButton17 = new javax.swing.JButton();
        jButton18 = new javax.swing.JButton();
        jPanel26 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree(populateKeyringTree());
        jPanel4 = new javax.swing.JPanel();
        jPanel18 = new javax.swing.JPanel();
        jPanel20 = new javax.swing.JPanel();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jPanel21 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jPanel25 = new javax.swing.JPanel();
        jButton14 = new javax.swing.JButton();
        jButton15 = new javax.swing.JButton();
        jPanel19 = new javax.swing.JPanel();
        jPanel22 = new javax.swing.JPanel();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jPanel23 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList();
        jPanel27 = new javax.swing.JPanel();
        jButton12 = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("OpenPGP Key Manager");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        jButton1.setMnemonic('o');
        jButton1.setText("Ok");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel1.add(jButton1);

        jButton2.setMnemonic('c');
        jButton2.setText("Cancel");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jPanel1.add(jButton2);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel2.setMinimumSize(new java.awt.Dimension(400, 500));
        jPanel2.setPreferredSize(new java.awt.Dimension(500, 400));
        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel8.setLayout(new java.awt.BorderLayout());

        jPanel8.setBorder(new javax.swing.border.TitledBorder("Local Files"));
        jLabel1.setText("Secret Key File");
        jPanel6.add(jLabel1);

        jTextField1.setColumns(20);
        jTextField1.setText(configurationData.getSetting("keymanager.openpgp.primary.secring","secring.pgp"));
        jPanel6.add(jTextField1);

        jButton3.setText("Browse...");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jPanel6.add(jButton3);

        jPanel8.add(jPanel6, java.awt.BorderLayout.CENTER);

        jLabel2.setText("Public Key File");
        jPanel7.add(jLabel2);

        jTextField2.setColumns(20);
        jTextField2.setText(configurationData.getSetting("keymanager.openpgp.primary.pubring","pubring.pgp"));
        jPanel7.add(jTextField2);

        jButton4.setText("Browse...");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jPanel7.add(jButton4);

        jPanel8.add(jPanel7, java.awt.BorderLayout.NORTH);

        jPanel3.add(jPanel8, java.awt.BorderLayout.NORTH);

        jPanel5.setLayout(new java.awt.BorderLayout());

        jPanel5.setBorder(new javax.swing.border.TitledBorder("Generate new keypair"));
        jPanel10.setLayout(new java.awt.BorderLayout());

        jButton5.setMnemonic('g');
        jButton5.setText("Generate Key...");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jPanel10.add(jButton5, java.awt.BorderLayout.CENTER);

        jPanel5.add(jPanel10, java.awt.BorderLayout.SOUTH);

        jLabel3.setText("Name");
        jPanel12.add(jLabel3);

        jTextField3.setColumns(10);
        jPanel12.add(jTextField3);

        jLabel4.setText("Address");
        jPanel12.add(jLabel4);

        jTextField4.setColumns(20);
        jPanel12.add(jTextField4);

        jPanel11.add(jPanel12);

        jLabel5.setText("Signing Key Algorithm");
        jPanel13.add(jLabel5);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(populateComboBox("openpgp.signaturealgorithm.available","RSA,DSA")));
        jComboBox1.setSelectedItem(configurationData.getSetting("keymanager.openpgp.keygen.default.signing","RSA"));
        jComboBox1.setPreferredSize(new java.awt.Dimension(150, 25));
        jPanel13.add(jComboBox1);

        jPanel11.add(jPanel13);

        jLabel6.setText("Public Key Algorithm");
        jPanel14.add(jLabel6);

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(populateComboBox("openpgp.pkalgorithm.available","RSA")));
        jComboBox2.setSelectedItem(configurationData.getSetting("keymanager.openpgp.keygen.default.pk","RSA"));
        jComboBox2.setPreferredSize(new java.awt.Dimension(150, 25));
        jPanel14.add(jComboBox2);

        jPanel11.add(jPanel14);

        jPanel17.setLayout(new java.awt.BorderLayout());

        jPanel17.setBorder(new javax.swing.border.TitledBorder("Passphrase"));
        jLabel8.setText("Again");
        jPanel15.add(jLabel8);

        jPasswordField2.setColumns(30);
        jPanel15.add(jPasswordField2);

        jPanel17.add(jPanel15, java.awt.BorderLayout.CENTER);

        jLabel7.setText("Passphrase");
        jPanel16.add(jLabel7);

        jPasswordField1.setColumns(30);
        jPanel16.add(jPasswordField1);

        jPanel17.add(jPanel16, java.awt.BorderLayout.NORTH);

        jPanel11.add(jPanel17);

        jPanel5.add(jPanel11, java.awt.BorderLayout.CENTER);

        jPanel3.add(jPanel5, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Primary key sources", jPanel3);

        jPanel9.setLayout(new java.awt.BorderLayout());

        jButton16.setMnemonic('m');
        jButton16.setText("Import...");
        jPanel24.add(jButton16);

        jButton19.setMnemonic('x');
        jButton19.setText("Export...");
        jPanel24.add(jButton19);

        jButton17.setMnemonic('d');
        jButton17.setText("Delete");
        jPanel24.add(jButton17);

        jButton18.setMnemonic('p');
        jButton18.setText("Properties...");
        jPanel24.add(jButton18);

        jPanel9.add(jPanel24, java.awt.BorderLayout.SOUTH);

        jPanel26.setLayout(new java.awt.BorderLayout());

        jPanel26.setBorder(new javax.swing.border.TitledBorder("Keyring"));
        jTree1.setCellRenderer(new KeyringCellRenderer());
        jScrollPane3.setViewportView(jTree1);

        jPanel26.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        jPanel9.add(jPanel26, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Manage local keys", jPanel9);

        jPanel4.setLayout(new java.awt.BorderLayout());

        jPanel18.setLayout(new java.awt.BorderLayout());

        jPanel18.setBorder(new javax.swing.border.TitledBorder("Secret Key Sources"));
        jButton9.setText("Add");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jPanel20.add(jButton9);

        jButton10.setText("Edit");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jPanel20.add(jButton10);

        jButton11.setText("Remove");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jPanel20.add(jButton11);

        jPanel18.add(jPanel20, java.awt.BorderLayout.CENTER);

        jScrollPane1.setPreferredSize(new java.awt.Dimension(350, 110));
        jList1.setModel(new KeySourceListModel(populateKeySourceList("keymanager.openpgp.secretlist.")));
        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList1.setCellRenderer(new KeySourceCellRenderer());
        jList1.setVisibleRowCount(5);
        jScrollPane1.setViewportView(jList1);

        jPanel21.add(jScrollPane1);

        jPanel25.setLayout(new java.awt.BorderLayout());

        jButton14.setText("D");
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });

        jPanel25.add(jButton14, java.awt.BorderLayout.CENTER);

        jButton15.setText("U");
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });

        jPanel25.add(jButton15, java.awt.BorderLayout.NORTH);

        jPanel21.add(jPanel25);

        jPanel18.add(jPanel21, java.awt.BorderLayout.NORTH);

        jPanel4.add(jPanel18, java.awt.BorderLayout.CENTER);

        jPanel19.setLayout(new java.awt.BorderLayout());

        jPanel19.setBorder(new javax.swing.border.TitledBorder("Public Key Sources"));
        jButton6.setText("Add");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jPanel22.add(jButton6);

        jButton7.setText("Edit");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jPanel22.add(jButton7);

        jButton8.setText("Remove");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jPanel22.add(jButton8);

        jPanel19.add(jPanel22, java.awt.BorderLayout.CENTER);

        jScrollPane2.setPreferredSize(new java.awt.Dimension(350, 110));
        jList2.setModel(new KeySourceListModel(populateKeySourceList("keymanager.openpgp.publiclist.")));
        jList2.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList2.setCellRenderer(new KeySourceCellRenderer());
        jList2.setVisibleRowCount(5);
        jScrollPane2.setViewportView(jList2);

        jPanel23.add(jScrollPane2);

        jPanel27.setLayout(new java.awt.BorderLayout());

        jButton12.setText("D");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        jPanel27.add(jButton12, java.awt.BorderLayout.CENTER);

        jButton13.setText("U");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });

        jPanel27.add(jButton13, java.awt.BorderLayout.NORTH);

        jPanel23.add(jPanel27);

        jPanel19.add(jPanel23, java.awt.BorderLayout.NORTH);

        jPanel4.add(jPanel19, java.awt.BorderLayout.NORTH);

        jTabbedPane1.addTab("Additional key sources", jPanel4);

        jPanel2.add(jTabbedPane1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        pack();
    }//GEN-END:initComponents
 
    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // Add your handling code here:
        
        KeySourceListModel lm = (KeySourceListModel)jList1.getModel();
        
        AddKeySource addsource = new AddKeySource(new javax.swing.JFrame(), true, "/core/keyhandlers/openpgp_secret_sources.lst");
        addsource.show();
        
        if (addsource.getReturnValue()!=null) {
            lm.add(addsource.getReturnValue());
        }
        
        
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // Add your handling code here:
        
        KeySourceListModel lm = (KeySourceListModel)jList2.getModel();
        
        AddKeySource addsource = new AddKeySource(new javax.swing.JFrame(), true, "/core/keyhandlers/openpgp_public_sources.lst");
        addsource.show();
        
        if (addsource.getReturnValue()!=null) {
            lm.add(addsource.getReturnValue());
        }
        
        
            
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        // Add your handling code here:
        if (jList1.getSelectedIndex()>=0) {
            KeySourceListModel lm = (KeySourceListModel)jList1.getModel();

            EditKeySource editsource = new EditKeySource(new javax.swing.JFrame(), true, (KeyHandler)lm.getElementAt(jList1.getSelectedIndex()));
            editsource.show();
            lm.set(jList1.getSelectedIndex(), editsource.getReturnValue());
            
            //jList1.repaint();
        }
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // Add your handling code here:
        if (jList2.getSelectedIndex()>=0) {
            KeySourceListModel lm = (KeySourceListModel)jList2.getModel();

            EditKeySource editsource = new EditKeySource(new javax.swing.JFrame(), true, (KeyHandler)lm.getElementAt(jList2.getSelectedIndex()));
            editsource.show();
            lm.set(jList2.getSelectedIndex(), editsource.getReturnValue());
            
            //jList2.repaint();
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        // Add your handling code here:
        if (jList1.getSelectedIndex()>=0) {
            KeySourceListModel lm = (KeySourceListModel)jList1.getModel();

            lm.remove(jList1.getSelectedIndex()); 
            //jList1.repaint();
        }
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // Add your handling code here:
        if (jList2.getSelectedIndex()>=0) {
            KeySourceListModel lm = (KeySourceListModel)jList2.getModel();

            lm.remove(jList2.getSelectedIndex()); 
            //jList2.repaint();
        }
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
        // Add your handling code here:
        if (jList1.getSelectedIndex()>=0) {
            KeySourceListModel lm = (KeySourceListModel)jList1.getModel();

            lm.demote(jList1.getSelectedIndex()); 
            if (jList1.getSelectedIndex()+1<lm.getSize())
                jList1.setSelectedIndex(jList1.getSelectedIndex()+1);
            
            //jList1.repaint();
        }
    }//GEN-LAST:event_jButton14ActionPerformed

    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed
        // Add your handling code here:
        if (jList1.getSelectedIndex()>=0) {
            KeySourceListModel lm = (KeySourceListModel)jList1.getModel();

            lm.promote(jList1.getSelectedIndex()); 
            jList1.setSelectedIndex(jList1.getSelectedIndex()-1);
            
            //jList1.repaint();
        }
    }//GEN-LAST:event_jButton15ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        // Add your handling code here:
        if (jList2.getSelectedIndex()>=0) {
            KeySourceListModel lm = (KeySourceListModel)jList2.getModel();

            lm.demote(jList2.getSelectedIndex()); 
            if (jList2.getSelectedIndex()+1<lm.getSize())
                jList2.setSelectedIndex(jList2.getSelectedIndex()+1);
            
            //jList2.repaint();
        }
    }//GEN-LAST:event_jButton12ActionPerformed

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        // Add your handling code here:
        if (jList2.getSelectedIndex()>=0) {
            KeySourceListModel lm = (KeySourceListModel)jList2.getModel();

            lm.promote(jList2.getSelectedIndex()); 
            jList2.setSelectedIndex(jList2.getSelectedIndex()-1);
            
            //jList2.repaint();
        }
    }//GEN-LAST:event_jButton13ActionPerformed

    protected void generateKey() {
        try {
            // validate form
            String pass1 = new String(jPasswordField1.getPassword());
            String pass2 = new String(jPasswordField2.getPassword());
            String name = jTextField3.getText();
            String address = jTextField4.getText();
            String pubfile = jTextField2.getText();
            String secfile = jTextField1.getText();
            
            String signingAlg = (String)jComboBox1.getSelectedItem();
            String encryptAlg = (String)jComboBox2.getSelectedItem();
            String symAlg = configurationData.getSetting("openpgp.symmetricalgorithm.used","IDEA");
            
            int symmetricAlgorithm = 0;
            int pkAlgorithm = 0;
            int dsAlgorithm = 0;

            // validate filenames
            if ( (pubfile.length()==0) || (secfile.length()==0) ) {
                javax.swing.JOptionPane.showMessageDialog(null, "Key file has not been specified!", "Problem", javax.swing.JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            // validate name and address
            if (name.length()==0) {
                javax.swing.JOptionPane.showMessageDialog(null, "Key file has not been specified!", "Problem", javax.swing.JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (address.length()==0) {
                javax.swing.JOptionPane.showMessageDialog(null, "Address field is blank", "Problem", javax.swing.JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            if (pass1.length()<8) {
                javax.swing.JOptionPane.showMessageDialog(null, "Passphrase must be at least 8 characters long!", "Problem", javax.swing.JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (pass1.compareTo(pass2)!=0) {
                javax.swing.JOptionPane.showMessageDialog(null, "Passphrases do not match!", "Problem", javax.swing.JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            
            // work out symmetric algorithm
            if ("IDEA".compareToIgnoreCase(symAlg)==0) {
                symmetricAlgorithm = SymmetricAlgorithmSettings.IDEA;
            } else if ("CAST5".compareToIgnoreCase(symAlg)==0) {
                symmetricAlgorithm = SymmetricAlgorithmSettings.CAST5;
            } else if ("3DES".compareToIgnoreCase(symAlg)==0) {
                symmetricAlgorithm = SymmetricAlgorithmSettings.TRIPLEDES;
            } else {
                System.err.println("Symmetric algorithm '"+symAlg+"' is not supported.");
                return;
            }
            
            // work out pk algorithm
            if ("RSA".compareToIgnoreCase(encryptAlg)==0) {
                pkAlgorithm = PublicKeyAlgorithmSettings.RSA_ENCRYPTSIGN;
            } else {
                System.err.println("Encryption algorithm '"+encryptAlg+"' is not supported.");
                return;
            }
            
            // work out dsa algorithm
            if ("RSA".compareToIgnoreCase(signingAlg)==0) {
                dsAlgorithm = PublicKeyAlgorithmSettings.RSA_ENCRYPTSIGN;
            } else if ("DSA".compareToIgnoreCase(signingAlg)==0) {
                dsAlgorithm = PublicKeyAlgorithmSettings.DSA;
            } else {
                System.err.println("Signature algorithm '"+signingAlg+"' is not supported.");
                return;
            }
            
            // key files to use
            OpenPGPPublicKeyring publicRing = new OpenPGPPublicKeyring(pubfile, null);
            OpenPGPSecretKeyring secretRing = new OpenPGPSecretKeyring(secfile, null);
            
            
            KeyGenStatusDlg status = new KeyGenStatusDlg(new javax.swing.JFrame(), false);
            status.generateOpenPGPKey(publicRing, secretRing, symmetricAlgorithm, dsAlgorithm, pkAlgorithm, name.getBytes(), address.getBytes(), pass1.getBytes());

        } catch (Exception e) {
            System.err.println(e.getMessage());
            javax.swing.JOptionPane.showMessageDialog(null, e.getMessage(), "Problem", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // Add your handling code here:
        generateKey();
        
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // Add your handling code here:
        
        // public key browse
        JFileChooser chooser = new JFileChooser();
        
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        chooser.setFileHidingEnabled(true);
        chooser.setMultiSelectionEnabled(false);

        int returnVal = chooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
           jTextField2.setText(chooser.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // Add your handling code here:
        
        // secret key browse
        JFileChooser chooser = new JFileChooser();
        
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        chooser.setFileHidingEnabled(true);
        chooser.setMultiSelectionEnabled(false);
        
        int returnVal = chooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
           jTextField1.setText(chooser.getSelectedFile().getAbsolutePath());
        }

        
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // Add your handling code here:
        setVisible(false);
        dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // Add your handling code here:
        
        // primary key sources
        configurationData.setSetting("keymanager.openpgp.primary.secring",jTextField1.getText());
        configurationData.setSetting("keymanager.openpgp.primary.pubring",jTextField2.getText());
        
        // SAVE KEYSOURCE LISTS - delete existing, set new
        
        int n = 1;
        while (configurationData.getSetting("keymanager.openpgp.publiclist."+n+".type", "").compareTo("")!=0) {
            configurationData.setSetting("keymanager.openpgp.publiclist."+n+".type", "");
            configurationData.setSetting("keymanager.openpgp.publiclist."+n+".filename", "");
            configurationData.setSetting("keymanager.openpgp.publiclist."+n+".serverport", "");
            configurationData.setSetting("keymanager.openpgp.publiclist."+n+".serveraddress", "");
            n++;
        }
        
        n = 1;
        while (configurationData.getSetting("keymanager.openpgp.secretlist."+n+".type", "").compareTo("")!=0) {
            configurationData.setSetting("keymanager.openpgp.secretlist."+n+".type", "");
            configurationData.setSetting("keymanager.openpgp.secretlist."+n+".filename", "");
            configurationData.setSetting("keymanager.openpgp.secretlist."+n+".serverport", "");
            configurationData.setSetting("keymanager.openpgp.secretlist."+n+".serveraddress", "");
            n++;
        }
    
        // extract secret & public
        KeySourceListModel publiclist = (KeySourceListModel)jList2.getModel(); // public
        KeySourceListModel secretlist = (KeySourceListModel)jList1.getModel();
        
        // process on type
        for (n = 0; n < publiclist.getSize(); n++) {
            String type = publiclist.getElementAt(n).getClass().getName();
            configurationData.setSetting("keymanager.openpgp.publiclist."+(n+1)+".type", type.substring(type.lastIndexOf(".")+1)); 
            
            if (publiclist.getElementAt(n) instanceof KeyServer) {
                KeyServer ks = (KeyServer)publiclist.getElementAt(n);
                configurationData.setSetting("keymanager.openpgp.publiclist."+(n+1)+".serveraddress", ks.getServerAddress());
                configurationData.setSetting("keymanager.openpgp.publiclist."+(n+1)+".serverport", Integer.toString(ks.getServerPort()));
            } else if (publiclist.getElementAt(n) instanceof KeyFile) {
                KeyFile ks = (KeyFile)publiclist.getElementAt(n);
                configurationData.setSetting("keymanager.openpgp.publiclist."+(n+1)+".filename", ks.getFileName());
            } else {
                System.err.println("Unrecognised key handler type.");
            }
        }
        
        for (n = 0; n < secretlist.getSize(); n++) {
            String type = secretlist.getElementAt(n).getClass().getName();
            configurationData.setSetting("keymanager.openpgp.secretlist."+(n+1)+".type", type.substring(type.lastIndexOf(".")+1)); 
            
            if (secretlist.getElementAt(n) instanceof KeyServer) {
                KeyServer ks = (KeyServer)secretlist.getElementAt(n);
                configurationData.setSetting("keymanager.openpgp.secretlist."+(n+1)+".serveraddress", ks.getServerAddress());
                configurationData.setSetting("keymanager.openpgp.secretlist."+(n+1)+".serverport", Integer.toString(ks.getServerPort()));
            } else if (secretlist.getElementAt(n) instanceof KeyFile) {
                KeyFile ks = (KeyFile)secretlist.getElementAt(n);
                configurationData.setSetting("keymanager.openpgp.secretlist."+(n+1)+".filename", ks.getFileName());
            } else {
                System.err.println("Unrecognised key handler type.");
            }
        }
        
            
        // Save the settings
        try {
            configurationData.saveConfig();
        } catch (IOException e) {
            System.err.println("Error saving configuration : " + e.getMessage());
        }
        
        // close window
        setVisible(false);
        dispose();
    }//GEN-LAST:event_jButton1ActionPerformed
    
    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog

    /** Internal method to populate the combo boxes with data. */
    private String[] populateComboBox(String setting, String def) {
        Vector v = new Vector();
        
        StringTokenizer st = new StringTokenizer(configurationData.getSetting(setting, def),",\r\n");
        
        while (st.hasMoreTokens()) {
            v.add(st.nextToken());
        }

        String items[] = new String[v.size()];
        for (int n = 0; n<items.length; n++)
            items[n] = (String)v.get(n);
        
        return items;
    }
    
    /** <p>Internal method to populate the secret & public key list boxes with data.</p> */
    private KeyHandler [] populateKeySourceList(String prefix) {
        try {          
            KeyHandler [] tmp = KeyHandler.loadKeysourceList(configurationData, prefix);
            
            if (tmp!=null) {         
                return tmp;
            } else {
                return null;
            }
            
        } catch (Exception e) {
            System.err.println(e.getMessage()); 
            return null;
        }
    }
    
    /** <p>Populate the keyring tree for displaying the content of the local keyrings.</p> */
    private TreeNode populateKeyringTree() {
        
        DefaultMutableTreeNode root = new DefaultMutableTreeNode("Local OpenPGP Keyring");
        DefaultMutableTreeNode secretring = new DefaultMutableTreeNode("Secret Keys");
        DefaultMutableTreeNode publicring = new DefaultMutableTreeNode("Public Keys");
        
        root.add(secretring);
        root.add(publicring);
        
            
        try {
            Vector packets = new Vector();
            OpenPGPPublicKeyring pubring = new OpenPGPPublicKeyring(configurationData.getSetting("keymanager.openpgp.primary.pubring","pubring.pgp"), null);
            OpenPGPSecretKeyring secring = new OpenPGPSecretKeyring(configurationData.getSetting("keymanager.openpgp.primary.secring","secring.pgp"), null);

            // get arrays
            Object [] tmp = secring.toArray();
            if (tmp!= null)
                for (int n = 0; n<tmp.length; n++)
                    packets.add(tmp[n]);
            
            tmp = pubring.toArray();
            if (tmp!= null)
                for (int n = 0; n<tmp.length; n++)
                    packets.add(tmp[n]);
            
            DefaultMutableTreeNode currentRootKeyNode = null;
            DefaultMutableTreeNode currentNode = null;
            DefaultMutableTreeNode currentPKNode = null;
            DefaultMutableTreeNode child = null;
            boolean firstUID = true;
            
            int n = 0;
            while (n<packets.size()) {
                
                if ((packets.elementAt(n) instanceof KeyPacket) && 
                    ( (!(packets.elementAt(n) instanceof SecretSubkeyPacket)) && 
                    (!(packets.elementAt(n) instanceof PublicSubkeyPacket)) ) ) {
                        // this is a primary key so this is the start of a new branch                                            
                        firstUID = true; // reset uid flag so we know what to do with the next uid we encounter
                        
                        // create empty node (we'll fill it later)
                        currentRootKeyNode = new DefaultMutableTreeNode();
                        currentNode = currentRootKeyNode;
                        
                        // save primary key node as child
                        child = new DefaultMutableTreeNode(packets.elementAt(n));
                        currentNode = child;
                        currentPKNode = child;
                        currentRootKeyNode.add(child);
                        

                        // add the new branch to the root of the tree
                        if (packets.elementAt(n) instanceof PublicKeyPacket)
                            publicring.add(currentRootKeyNode);
                        else 
                            secretring.add(currentRootKeyNode);
                        
                } else if (packets.elementAt(n) instanceof SignaturePacket) {
                   
                    // don't set current node
                    child = new DefaultMutableTreeNode(packets.elementAt(n));
                    currentNode.add(child);
                    
                } else if (packets.elementAt(n) instanceof UserIDPacket) {
                                       
                    child = new DefaultMutableTreeNode(packets.elementAt(n));
                    currentPKNode.add(child);
                    currentNode = child;

                                    
                    if (firstUID) {
                        firstUID = false;
                        currentRootKeyNode.setUserObject(packets.elementAt(n));
                    }
                    
                } else if ( (packets.elementAt(n) instanceof SecretSubkeyPacket) || 
                    (packets.elementAt(n) instanceof PublicSubkeyPacket)) {                                         
                        child = new DefaultMutableTreeNode(packets.elementAt(n));
                        currentRootKeyNode.add(child);
                        currentNode = child;
                        
                }

                n++;
            }
    
           // return currentRootKeyNode;
        } catch (Exception e) {
            System.err.println(e.getMessage());
        }

        return root;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel27;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JButton jButton9;
    private javax.swing.JPasswordField jPasswordField2;
    private javax.swing.JButton jButton8;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton6;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JButton jButton5;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton19;
    private javax.swing.JButton jButton18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton16;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JButton jButton15;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JButton jButton14;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JButton jButton13;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JButton jButton12;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JButton jButton11;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JButton jButton10;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JList jList2;
    private javax.swing.JList jList1;
    private javax.swing.JTree jTree1;
    // End of variables declaration//GEN-END:variables
    private ConfigurationData configurationData;
    //private final ProgressMonitor progressMonitor;
    
    
    /** Override of cell renderer for keyring display. */
    public class KeyringCellRenderer extends DefaultTreeCellRenderer {
        
        private ImageIcon secretKeyIcon;
        private ImageIcon publicKeyIcon;
        private ImageIcon userIDIcon;
        private ImageIcon keyringIcon;
        private ImageIcon signatureIcon;
        
        public KeyringCellRenderer() {
            // load icons
            secretKeyIcon= new ImageIcon(java.awt.Toolkit.getDefaultToolkit().getImage(this.getClass().getResource("/res/gfx/secretkey.gif"))); 
            publicKeyIcon= new ImageIcon(java.awt.Toolkit.getDefaultToolkit().getImage(this.getClass().getResource("/res/gfx/publickey.gif"))); 
            userIDIcon= new ImageIcon(java.awt.Toolkit.getDefaultToolkit().getImage(this.getClass().getResource("/res/gfx/userid.gif"))); 
            keyringIcon= new ImageIcon(java.awt.Toolkit.getDefaultToolkit().getImage(this.getClass().getResource("/res/gfx/keyring.gif"))); 
            signatureIcon= new ImageIcon(java.awt.Toolkit.getDefaultToolkit().getImage(this.getClass().getResource("/res/gfx/signature.gif"))); 

        }
        
        public Component getTreeCellRendererComponent(
                        javax.swing.JTree tree,
                        Object value,
                        boolean sel,
                        boolean expanded,
                        boolean leaf,
                        int row,
                        boolean hasFocus) {

            super.getTreeCellRendererComponent(
                            tree, value, sel,
                            expanded, leaf, row,
                            hasFocus);
            
            DefaultMutableTreeNode node = (DefaultMutableTreeNode)value;
            DefaultMutableTreeNode parent = (DefaultMutableTreeNode)node.getParent();
            
            // change icons etc based on the packet type of user object
            
            if (node.getUserObject() instanceof SecretKeyPacket) {
                // this is a secret key packet
                setIcon(secretKeyIcon);
            } else if (node.getUserObject() instanceof PublicKeyPacket) {
                // this is a public key packet
                setIcon(publicKeyIcon);
            } else if ((node.getUserObject() instanceof UserIDPacket) &&
                (parent.getUserObject()!=null) && !(parent.getUserObject() instanceof String )) {
                    // this is a user id
                    setIcon(userIDIcon);
            } else if (node.getUserObject() instanceof UserIDPacket) {
                // this is a keyring
                setIcon(keyringIcon);
            } else if (node.getUserObject() instanceof SignaturePacket) {
                // this is a signature
                setIcon(signatureIcon);
            }

            return this;
        }
    }

    /** Inner class to render pretty icon on the key source list. */
    public class KeySourceCellRenderer extends JLabel implements ListCellRenderer {

        private ImageIcon fileSourceIcon;
        private ImageIcon serverSourceIcon;
        
        public KeySourceCellRenderer() {
            fileSourceIcon= new ImageIcon(java.awt.Toolkit.getDefaultToolkit().getImage(this.getClass().getResource("/res/gfx/source_file.gif"))); 
            serverSourceIcon= new ImageIcon(java.awt.Toolkit.getDefaultToolkit().getImage(this.getClass().getResource("/res/gfx/source_server.gif"))); 
            
        }
        
        public Component getListCellRendererComponent(
           javax.swing.JList list,
           Object value,            // value to display
           int index,               // cell index
           boolean isSelected,      // is the cell selected
           boolean cellHasFocus)    // the list and the cell have the focus
        {
            
             String s = value.toString();
             setText(s);

             if (isSelected) {
                 setBackground(list.getSelectionBackground());
                 setForeground(list.getSelectionForeground());
             } else {
                setBackground(list.getBackground());
                setForeground(list.getForeground());
             }
             
             setEnabled(list.isEnabled());
             setFont(list.getFont());
             setOpaque(true);

             // Render list with different icon / tooltip depending on which type of key source we're rendering.
             if (value instanceof KeyFile) {
                 setIcon(fileSourceIcon);
             } else if (value instanceof KeyServer) {
                 setIcon(serverSourceIcon);   
             }

             return this;
        }

    }

    
    /** Inner class to populate the key source list box. */
    public class KeySourceListModel extends javax.swing.AbstractListModel {
        
        private Vector sources;
        
        public KeySourceListModel(KeyHandler [] list) {
            sources = new Vector();
            
            if (list!=null) {
                for (int n = 0; n < list.length; n++)
                    sources.add(list[n]);
            }
        }
        
        protected void notifyListeners() {
            ListDataListener [] listeners = getListDataListeners(); 
            for (int n=0; n < listeners.length; n++)
                listeners[n].contentsChanged(new ListDataEvent(this, ListDataEvent.CONTENTS_CHANGED, 0, getSize()));

        }
        
        public int getSize() {
            return sources.size();
        }
        
        public Object getElementAt(int i) {
            return sources.elementAt(i);
        }
        
        
        public void demote(int i) {
            KeyHandler tmp = (KeyHandler)sources.elementAt(i);
            
            if (i+1<sources.size()) {
               sources.removeElementAt(i); 
               sources.insertElementAt(tmp, i+1);
            }
            notifyListeners();
        }
        
        public void promote(int i) {
            KeyHandler tmp = (KeyHandler)sources.elementAt(i);
            
            if (i-1>=0) {
                sources.removeElementAt(i);
                sources.insertElementAt(tmp, i-1);
            }
            notifyListeners();
        }
        
        public void remove(int i) {
            if (i<sources.size())
                sources.removeElementAt(i);
            notifyListeners();
        }
        
        public void add(KeyHandler kh) {
            sources.add(kh);
            notifyListeners();
        }
        
        public void set(int i, KeyHandler kh) {
            if (i<sources.size())
                sources.setElementAt(kh, i);
            notifyListeners();
        }
    }
}
