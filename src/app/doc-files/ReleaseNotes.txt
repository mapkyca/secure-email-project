==============================================================================
=== OXFORD BROOKES UNIVERSITY SECURE EMAIL PROJECT                         ===
=== SECURE EMAIL PROXY                                                     ===
==============================================================================   
<<< RELEASE NOTES >>>
==============================================================================

------------------------------------------------------------------------------
<<< RELEASE DETAILS >>>
------------------------------------------------------------------------------
RELEASE VERSION : 
RELEASE DATE (dd/mm/yyyy) : 
TYPE OF RELEASE : 
------------------------------------------------------------------------------
FEATURES :

* No plugins neccessary
* Works with all email clients
* Will run on any OS that has a compatible JVM
* OpenPGP Encryption and signing

------------------------------------------------------------------------------
SYSTEM REQUIREMENTS :

* Java JRE 1.4 (or JRE 1.3 with JCE 1.2.1 extensions)
* Legion of the Bouncy Castle JCE 1.16b5 or later.

------------------------------------------------------------------------------
KNOWN ISSUES :

* Keyring key handlers need to be able to handle multiple user IDs on a key. Need to modify
  all KeyFile add/delete/find methods.
    - add, iddetails are written in a loop, each one is signed
    - find, search through all key ids before quitting.
    - delete, as with find, search through all key ids
* Keyring key handlers need to be able to handle revocation signatures straight after the 
  primary key.
* Key source management UI needs a restart to come into effect.
* If someone replies to an email you sent with the raw text signature attached it is verified
  - this could be misleading.
* There is a problem with quoted printable attachments (text attachments). The signatures
  that the proxy generates does not verify in NAIPGP. NAPGP also produces binary not text
  signatures, which do not verify in the proxy. This seems to be a problem common with a 
  number of PGP implementations due to problems in the spec.
* QuotedPrintable.encode() not implemented.
* Email proxy does not pick up addressess for BCC fields. Perhaps lift recipient
  from email envelope instead of email headers? This will require the key search 
  to be less strict and find keys on email address ONLY. Are we sure we want encryption
  for BCC anyway?
* Key handlers / algorithm handlers need to resolve multiple keys found better - especially when some
  keys have been marked as depreciated.
* OpenPGPHTTPPublicKeyServer currently does not return a success code if key was 
  added / replaced / whatever.
* Proxy sometimes does fully shut down on exit & requires you to kill the jvm.
* Possible intermittent problem with session keys. Symptom - message body failed to
  decrypt however message attachment was decrypted correctly. Was unable to repro the
  problem. Message was :
    Processing multipart body...
    Message body is encrypted.
    Error: Session key is invalid, this message can not be decrypted.
    Message body is encrypted.
    Error: Session key is invalid, this message can not be decrypted.
    Done.
* DSA does not work.
* Now that the cryptography algorithms have been implemented the memory issues 
  mentioned previously have become more pronounced. Now sending attachments of more than a few
  tens of K will cause the VM to throw an OutOfMemoryError error.
* Proxy & Mailserver smtp auth not implemented. Password is not saved by 
  ConfigurationWindow.
* Key management currently non existent.
* OpenPGPHandler currently does NOT check preferred algorithms in key signatures 
  before encrypting. In order to do this you should add signature information to
  core.keyhandlers.keydata.OpenPGPKeyData(and make the appropriate changes in 
  OpenPGPHandler & the OpenPGP key handlers. This isn't a big mod, but I don't 
  have time to implement it at the moment.
* Key gen sizes are currently fixed to whatever the hard coded default value is.
  Again, this is an easy fix but I don't have time at the moment. To implement, 
  change the keygen code in ui.OpenPGPKeyManager to use a key size loaded from 
  the config file/keygen dialog instead of using PublicKeyAlgorithmSettings.getDefaultKeySize(1).
  Don't forget to do some range checking on the key value.
* Key gen code does not specify algorithm preferences.
* Email class does not directly handle UUEncoded attachments - or rather they are 
  handled as part of the message body.
* HTML formatted email is not handled particularily well. Armor needs to be converted into HTML
  and then encoded into quoted-printable.
* Keyrings generated by this code do not seem to be 100% compatible with NAPGPG
    - NAPGP 8 reports the cipher wrong (i am fairly sure this is a bug in PGP 8
    - PGP is misreading the pass phrase.
  I am reasonably sure this is a "feature" with NAPGP. My OpenPGP implementation
  can successfully read and decode third party generated packets without problems.
  I have also had problems in the past importing keys generated with other PGP 
  implementations into NAPGP.

  Public keys work fine however.
* Currently there is a major security issue attached to running the proxy on
  operating systems that allow other users to log in (i.e. *nix). 

  There is currently no way to authenticate users when sending SMTP mail. 
  Therefore unless the user has configured the proxy to ask for a password 
  it is possible for a user to configure their mail client to send (although not
  to receive) email as that user.

  A fix would be to make the SMTP handler require authentication and a login 
  (and while we're at it, make pop3 do the same). This would be handled locally, 
  and the proxy will be configured with the mail server's equivs of these if 
  necessary.
* Currently core.algorithmhandlers.PassPhrase stores the passphrase in the clear.
* "Critical" V4 Signature sub packets do not appear to be compatible with NAPGP.
  I'm reasonable sure this is a bug in NAPGP.
* Some packet header features not yet fully tested : Old format intermediate 
  length, new format intermediate.
* RSAAlgorithmParameters.getPrivateKey() does not use all available secret key 
  material to generate a SecretKey object. The temptation was to use 
  RSAPrivateCrtKeySpec initially, but this was found not to work.
  Using RSAPrivateKeySpec seems to be ok.
* May be a problem handling really huge integer sizes in packet streams. This 
  seemsto be a known issue with NAPGP as well...
* Sending really large emails causes out of memory errors. Try 
  optimising mail handling routines, think about alternate methods
  like writing mail to disk.
* Sending large messages can cause timeout issues on the client.
* Email pipes and protocol handlers are a bit untidy and need
  to be optimized.

------------------------------------------------------------------------------
CHANGE LOG :

Version xxxxxxx (xxxxxxxxx) - xxxxxxxxxxxxxxxxxxxxxxxxxxxxx

* Fixed mime component deep clone problem. 
* Main application has its own custom icon.
* Application build info moved to /res/build.info. This file is also used by Ant.
  This makes the version info more flexable and accessable.
* Key Source UI added
* "Content-Disposition: inline" now handled. It is treated as an attachment although
  headers are preserved.

Version 0.1.250 (28/2/2003) - End of project public release

* Fixed null point exception while processing emails without attachments and without
  a content type header.
* Configuration file is now sorted when written, thus making it a lot easier to read.
* Fixed text signature interoperability bug.
* Version 3 Secret Key Packets implemented; and yay there was much rejoicing.
* Fixed multi-recipient parse bug in core.email.Email#getRecipients().
* Fixed embarassing bug in core.email.Email#getRecipients(). Now extracts addresses
  from CC field as well as the To field. 
* Fixed misleading signature warning messages in incoming message summary.
* Fixed non-tabbed white space parse bug in email headers.
* Email Header parser now accepts space as well as tab to denote folded header.
* Incoming email logging improved.
* addKeys implemented in OpenPGPHTTPPublicKeyServer.
* Fixed recipient names containing "," characters are not parsed correctly by 
  core.email.Email#getRecipients bug.
* Fixed CheckSumFailureException class munging problem introduced by URL keyfile readers.
* Basic PKS "Horowitz Key Protocol" server support added. Use OpenPGPHTTPPublicKeyServer.
* Basic asc key file format added (core.keyhandlers.OpenPGPAsc*).
* core.keyhandlers.OpenPGPPublicKeyringURLReader class added.
* Security.addProvider(new BouncyCastleProvider()); initialisation moved to app.EmailProxy.
  This is to allow people using the library to decide if they want to load the library
  dynamically or from the JVM's java.security file.
* Version 3 KeyID and Fingerprint support added, it is now possible to use V3
  public keys. 
* Fixed problem with secret and public key pairs having different key IDS. This was
  related to the timestamping. Now when adding keys to a keyring you must specify a
  Date object in the parameters object (assuming your not adding an already created 
  key object). 
* New constructors added to KeyPacket and children, old ones found to be unsafe and
  have therefore been depreciated.
* Misc UI tweaks.
* Removed PK & Signature algorithm selection from configuration.
* Preference of public key encryption / signature algorithm now governed by
  key type rather than user config. This is safer.

Version 0.1.201 (18/1/2003) - First working alpha release

* Now using GPL. Read gpl.txt or use the /c switch for details. All
  source code now includes a copyright message.
* OpenPGP RFC2440 support added (currently supports: RSA, IDEA, CAST5 & 3DES 
  with MD5 & SHA1 hash algorithms and Zip compression).
* Email class completely rewritten, optimised and now parses MIME messages
  (including MIME attachments).
* Now uses the Legion Of The Bouncy Castle (www.bouncycastle.org) JCE. 
  The appropriate JAR file should be installed before the proxy will
  run. 
* Config file now implemented using Java Properties.
* system.StatusOutputStream class optimised a bit.
* UIDL multiline command support added. You can now request mail to be
  left on the server. Oops.
* Rewrote core.protocolhandlers.CommonHandler slightly in order to
  successfully build against JDK 1.3.x. This was done in order to 
  be able to potentially use third party JCE implementations that 
  have not been able to obtain a certificate (to comply with the 
  draconian US export laws).
* Encryption and Signature handling packages combined.
* Mail routines optimized slightly.
* Localhost test made more reliable.

Version 0.1.85 (27/5/2002) - Development team sneak peek

* Email send and receive speed improved. Socket and Email classes 
  optimized. Mail is now handled much faster.
* This file created.

